[build-system]
requires = ["setuptools", "setuptools_scm", "setuptools_rust", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python3-template-project"
description = "Python3 template project"
authors = [
    { name = "Oleg Korsak", email = "kamikaze.is.waiting.you@gmail.com" }
]
license = "GPL-3.0"
readme = {file = "README.rst", content-type = "text/x-rst; charset=UTF-8"}
keywords = ["template", "example", "project"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
]
requires-python = "==3.14.0"
dynamic = ["version"]
dependencies = [
    "pydantic==2.12.3",
    "pydantic-settings==2.11.0",
]

[project.urls]
Documentation = "https://github.com/kamikaze/python3-project-template/wiki"
Homepage = "https://github.com/kamikaze/python3-project-template"

[dependency-groups]
dev = [
    "build",
    "pip",
    "pre-commit",
    "pyright",
    "ruff",
    "setuptools",
    "setuptools_rust",
    "wheel"
]
testing = [
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
]

[project.entry-points.console_scripts]
# Example: Uncomment and replace with actual entry points if needed
# fibonacci = "python3_project_template.skeleton:run"

[tool.setuptools]
zip-safe = false
package-dir = { "" = "src" }
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
exclude = ["tests"]

[tool.setuptools.package-data]
python3_project_template = [
    "rustlib/Cargo.toml",
    "rustlib/lib.rs",
    "clib/extmod.c",
    "*.rst",
    "*.txt",
    "*.md"
]

[tool.setuptools.dynamic]
readme = {file = "README.rst"}
version = {attr = "setuptools_scm.get_version"}

[tool.setuptools_rust]
# Optional Rust-specific configuration
# Positioning of the compiled extension
extensionmodule = true

[tool.bdist_wheel]
universal = true

[tool.build_sphinx]
source_dir = "docs"
build_dir = "build/sphinx"

[tool.devpi.upload]
no-vcs = true
formats = ["bdist_wheel"]

[tool.ruff]
line-length = 120
indent-width = 4
target-version = "py313"

[tool.ruff.analyze]
detect-string-imports = true

[tool.ruff.lint]
select = [
    "FAST",
    "YTT",
    "ANN",
    "I",
    "E",
    "W",
    "PYI",

    "A",
#    "ARG",
    "ASYNC",
    "B",
    "C4",
    "DTZ",
    "EM",
    "EXE",
    "F",
    "FA",
    "FBT",
    "FLY",
    "FURB",
#    "G",
    "ICN",
    "INP",
    "ISC",
    "LOG",
    "N",
    "NPY",
    "PD",
    "PERF",
    "PIE",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "PT",
    "PTH",
    "Q",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLF",
    "SLOT",
    "T20",
    "TC",
    "TID",
    "TRY",
    "UP",
]
ignore = [
    "ASYNC109",
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = ["S101"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"

[tool.ruff.format]
exclude = ["*.pyi"]
indent-style = "space"
quote-style = "single"

[tool.pyright]
venvPath = "."
venv = ".venv"
reportMatchNotExhaustive = "error"
reportUnnecessaryComparison = "error"

[tool.pytest.ini_options]
pythonpath = ["src"]
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
addopts = "--cov python3_project_template --cov-fail-under=20 --cov-report term-missing --verbose"
norecursedirs = ["dist", "build", ".tox"]
testpaths = ["tests"]
